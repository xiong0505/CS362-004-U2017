Result for running unit and card tests:
unittest1.c
TESTING isGameOver():
Test player 0 with 1 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
Test player 0 with 2 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
Test player 0 with 3 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
Test player 0 with 4 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
Test player 0 with 5 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
Test player 1 with 1 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
Test player 1 with 2 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
Test player 1 with 3 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
Test player 1 with 4 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
Test player 1 with 5 on-hand card(s).
isGameOver = 0, expected = 0 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 1, expected = 1 pass 
isGameOver = 0, expected = 0 pass 
isGameOver = 0, expected = 0 pass 
All tests passed!
File 'dominion.c'
Lines executed:17.58% of 563
Creating 'dominion.c.gcov'

unittest2.c
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
Test player 0, and expected whose turn is 0.
Test player 1, and expected whose turn is 1.
Test player 2, and expected whose turn is 2.
Test player 3, and expected whose turn is 3.
All tests passed!
File 'dominion.c'
Lines executed:22.56% of 563
Creating 'dominion.c.gcov'

unittest3.c
TESTING scoreFor():
Test player 0 with 1 treasure card(s).
score = 1, expected = 1
Test player 0 with 1 treasure card(s).
score = 3, expected = 3
Test player 0 with 1 treasure card(s).
score = 6, expected = 6
Test player 0 with 2 treasure card(s).
score = 2, expected = 2
Test player 0 with 2 treasure card(s).
score = 6, expected = 6
Test player 0 with 2 treasure card(s).
score = 12, expected = 12
Test player 0 with 3 treasure card(s).
score = 3, expected = 3
Test player 0 with 3 treasure card(s).
score = 9, expected = 9
Test player 0 with 3 treasure card(s).
score = 18, expected = 18
Test player 0 with 4 treasure card(s).
score = 4, expected = 4
Test player 0 with 4 treasure card(s).
score = 12, expected = 12
Test player 0 with 4 treasure card(s).
score = 24, expected = 24
Test player 0 with 5 treasure card(s).
score = 5, expected = 5
Test player 0 with 5 treasure card(s).
score = 15, expected = 15
Test player 0 with 5 treasure card(s).
score = 30, expected = 30
Test player 1 with 1 treasure card(s).
score = 1, expected = 1
Test player 1 with 1 treasure card(s).
score = 3, expected = 3
Test player 1 with 1 treasure card(s).
score = 6, expected = 6
Test player 1 with 2 treasure card(s).
score = 2, expected = 2
Test player 1 with 2 treasure card(s).
score = 6, expected = 6
Test player 1 with 2 treasure card(s).
score = 12, expected = 12
Test player 1 with 3 treasure card(s).
score = 3, expected = 3
Test player 1 with 3 treasure card(s).
score = 9, expected = 9
Test player 1 with 3 treasure card(s).
score = 18, expected = 18
Test player 1 with 4 treasure card(s).
score = 4, expected = 4
Test player 1 with 4 treasure card(s).
score = 12, expected = 12
Test player 1 with 4 treasure card(s).
score = 24, expected = 24
Test player 1 with 5 treasure card(s).
score = 5, expected = 5
Test player 1 with 5 treasure card(s).
score = 15, expected = 15
Test player 1 with 5 treasure card(s).
score = 30, expected = 30
Test player 2 with 1 treasure card(s).
score = 1, expected = 1
Test player 2 with 1 treasure card(s).
score = 3, expected = 3
Test player 2 with 1 treasure card(s).
score = 6, expected = 6
Test player 2 with 2 treasure card(s).
score = 2, expected = 2
Test player 2 with 2 treasure card(s).
score = 6, expected = 6
Test player 2 with 2 treasure card(s).
score = 12, expected = 12
Test player 2 with 3 treasure card(s).
score = 3, expected = 3
Test player 2 with 3 treasure card(s).
score = 9, expected = 9
Test player 2 with 3 treasure card(s).
score = 18, expected = 18
Test player 2 with 4 treasure card(s).
score = 4, expected = 4
Test player 2 with 4 treasure card(s).
score = 12, expected = 12
Test player 2 with 4 treasure card(s).
score = 24, expected = 24
Test player 2 with 5 treasure card(s).
score = 5, expected = 5
Test player 2 with 5 treasure card(s).
score = 15, expected = 15
Test player 2 with 5 treasure card(s).
score = 30, expected = 30
Test player 3 with 1 treasure card(s).
score = 1, expected = 1
Test player 3 with 1 treasure card(s).
score = 3, expected = 3
Test player 3 with 1 treasure card(s).
score = 6, expected = 6
Test player 3 with 2 treasure card(s).
score = 2, expected = 2
Test player 3 with 2 treasure card(s).
score = 6, expected = 6
Test player 3 with 2 treasure card(s).
score = 12, expected = 12
Test player 3 with 3 treasure card(s).
score = 3, expected = 3
Test player 3 with 3 treasure card(s).
score = 9, expected = 9
Test player 3 with 3 treasure card(s).
score = 18, expected = 18
Test player 3 with 4 treasure card(s).
score = 4, expected = 4
Test player 3 with 4 treasure card(s).
score = 12, expected = 12
Test player 3 with 4 treasure card(s).
score = 24, expected = 24
Test player 3 with 5 treasure card(s).
score = 5, expected = 5
Test player 3 with 5 treasure card(s).
score = 15, expected = 15
Test player 3 with 5 treasure card(s).
score = 30, expected = 30
All tests passed!
File 'dominion.c'
Lines executed:24.69% of 563
Creating 'dominion.c.gcov'

unittest4.c
TESTING getWinners():
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
Test player 0 has score = 5.
Test player 1 has score = 15.
Test player 2 has score = 30.
The winner is player 2, and expected winner is player 2.
All tests passed!
File 'dominion.c'
Lines executed:29.13% of 563
Creating 'dominion.c.gcov'

cardtest1
TESTING smithy():
Before smithy: player=0, handCount=5, deckCout=5, discardCount=10. 
After smithy: player=0, handCount=6, deckCout=3, discardCount=10. 
handCount: FAIL
deckCount+discardCount: pass
Before smithy: player=0, handCount=5, deckCout=3, discardCount=10. 
After smithy: player=0, handCount=6, deckCout=1, discardCount=10. 
handCount: FAIL
deckCount+discardCount: pass
Before smithy: player=0, handCount=5, deckCout=2, discardCount=10. 
After smithy: player=0, handCount=6, deckCout=0, discardCount=10. 
handCount: FAIL
deckCount+discardCount: pass
Before smithy: player=0, handCount=5, deckCout=1, discardCount=10. 
After smithy: player=0, handCount=6, deckCout=9, discardCount=0. 
handCount: FAIL
deckCount+discardCount: pass
File 'dominion.c'
Lines executed:36.23% of 563
Creating 'dominion.c.gcov'

cardtest2
TESTING adventurer():
Before adventurer: player=0, handCount=5, deckCout=5, discardCount=10. 
After adeventurer: player=0, handCount=6, deckCout=4, discardCount=10. 
handCount: FAIL
deckCount+discardCount: FAIL
Before adventurer: player=0, handCount=5, deckCout=5, discardCount=10. 
After adeventurer: player=0, handCount=6, deckCout=3, discardCount=11. 
handCount: FAIL
deckCount+discardCount: FAIL
File 'dominion.c'
Lines executed:39.08% of 563
Creating 'dominion.c.gcov'

cardtest3
TESTING village():
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
Before village: player=0, handCount=5, deckCout=5, playedCardCount=0, numActions=1. 
After village: player=0, handCount=5, deckCout=4, playedCardCount=1, numActions=2. 
handCount: pass
deckCount+discardCount: pass
numActions: FAIL
File 'dominion.c'
Lines executed:40.32% of 563
Creating 'dominion.c.gcov'

cardtest4
TESTING embargo():
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
Before embargo: player=0, handCount=5, deckCout=5, discardCount=10, embargoTokensOld=0, coinsOld=4. 
After embargo: player=0, handCount=4, deckCout=5, discardCount=10, embargoTokensOld=1, coinsOld=5. 
handCount: pass
deckCount+discardCount: pass
embargo: pass
coins: FAIL
File 'dominion.c'
Lines executed:41.92% of 563
Creating 'dominion.c.gcov'

