        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 986625 returned 100% blocks executed 83%
   986625:    8:int compare(const void* a, const void* b) {
   986625:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
   986625:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
   263088:   12:    return -1;
   723537:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 32076 returned 100% blocks executed 95%
    32076:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    32076:   44:  SelectStream(1);
call    0 returned 100%
    32076:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    32076:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    32076:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   352836:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  3528360:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  3207600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    32076:   73:  if (numPlayers == 2)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:   74:    {
    31016:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     1060:   77:  else if (numPlayers == 3)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -:   78:    {
      500:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      560:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    32076:   87:  if (numPlayers == 2)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:   88:    {
    31016:   89:      state->supplyCount[estate] = 8;
    31016:   90:      state->supplyCount[duchy] = 8;
    31016:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     1060:   95:      state->supplyCount[estate] = 12;
     1060:   96:      state->supplyCount[duchy] = 12;
     1060:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    32076:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    32076:  102:  state->supplyCount[silver] = 40;
    32076:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   673596:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  5292540:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  4971780:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   320760:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:		{
     7304:  115:		  if (numPlayers == 2){ 
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
     1532:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     2120:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   317108:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   320760:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  4651020:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    97848:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
    65772:  140:      state->deckCount[i] = 0;
   263088:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
   197316:  143:	  state->deck[i][j] = estate;
   197316:  144:	  state->deckCount[i]++;
        -:  145:	}
   526176:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   460404:  148:	  state->deck[i][j] = copper;
   460404:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    97848:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
    65772:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    97848:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    65772:  166:      state->handCount[i] = 0;
    65772:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   898128:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   866052:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    32076:  182:  state->outpostPlayed = 0;
    32076:  183:  state->phase = 0;
    32076:  184:  state->numActions = 1;
    32076:  185:  state->numBuys = 1;
    32076:  186:  state->playedCardCount = 0;
    32076:  187:  state->whoseTurn = 0;
    32076:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   192456:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   160380:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
    32076:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
    32076:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 75974 returned 100% blocks executed 100%
    75974:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    75974:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    75974:  209:  if (state->deckCount[player] < 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
    10199:  210:    return -1;
    65775:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   789300:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   657750:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   657750:  216:    newDeck[newDeckPos] = state->deck[player][card];
   657750:  217:    newDeckPos++;
  2361565:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
  1703815:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   657750:  221:    state->deckCount[player]--;
        -:  222:  }
   723525:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   657750:  224:    state->deck[player][i] = newDeck[i];
   657750:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    65775:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 31500 returned 100% blocks executed 100%
    31500:  320:int supplyCount(int card, struct gameState *state) {
    31500:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 65018 returned 100% blocks executed 100%
    65018:  346:int whoseTurn(struct gameState *state) {
    65018:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2000 returned 100% blocks executed 100%
     2000:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
     2000:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
    12000:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    10000:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
     2000:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
     2000:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
     1500:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
      500:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
     2000:  370:  state->outpostPlayed = 0;
     2000:  371:  state->phase = 0;
     2000:  372:  state->numActions = 1;
     2000:  373:  state->coins = 0;
     2000:  374:  state->numBuys = 1;
     2000:  375:  state->playedCardCount = 0;
     2000:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    12000:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
     2000:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
     2000:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 180 returned 100% blocks executed 100%
      180:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      180:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
       60:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      120:  401:  j = 0;
     3120:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     3000:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
      180:  406:	  j++;
        -:  407:	}
        -:  408:    }
      120:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
       30:  411:      return 1;
        -:  412:    }
        -:  413:
       90:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 3060 returned 100% blocks executed 36%
     3060:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     3060:  420:  int score = 0;
        -:  421:  //score from hand
    18240:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  423:    {
    15180:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    15180:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    15180:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    15180:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    15180:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    15180:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     3060:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     3060:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
     3060:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 500 returned 100% blocks executed 100%
      500:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
     2500:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
     2000:  467:      if (i >= state->numPlayers)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  468:	{
      500:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
     1500:  473:	  players[i] = scoreFor (i, state);
call    0 returned 100%
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
      500:  478:  j = 0;
     2500:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  480:    {
     2000:  481:      if (players[i] > players[j])
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  482:	{
     1000:  483:	  j = i;
        -:  484:	}
        -:  485:    }
      500:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
      500:  489:  currentPlayer = whoseTurn(state);
call    0 returned 100%
     2500:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  491:    {
     2000:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  493:	{
      500:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
      500:  499:  j = 0;
     2500:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  501:    {
     2000:  502:      if ( players[i] > players[j] )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  503:	{
     1000:  504:	  j = i;
        -:  505:	}
        -:  506:    }
      500:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
     2500:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  511:    {
     2000:  512:      if ( players[i] == highScore )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  513:	{
      500:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
     1500:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
      500:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 504900 returned 100% blocks executed 100%
   504900:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   504900:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5791:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 1%
branch  1 taken 99% (fallthrough)
       30:  534:      state->deck[player][i] = state->discard[player][i];
       30:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5761:  538:    state->deckCount[player] = state->discardCount[player];
     5761:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5761:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5761:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5761:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5761:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5761:  559:    if (deckCounter == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     5758:  560:      return -1;
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   499139:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   499139:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   499139:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   499139:  576:    state->deckCount[player]--;
   499139:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   499142:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/****************************************************
        -:  647:* Refactor assignment2
        -:  648:****************************************************/
        -:  649:
function Adventurer called 10002 returned 100% blocks executed 94%
    10002:  650:int Adventurer(struct gameState* state){
    10002:  651:  int drawntreasure=0;
    10002:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  653:  int cardDrawn;
        -:  654:  int temphand[MAX_HAND];
    10002:  655:  int z = 0;// this is the counter for the temp hand
        -:  656:
   304008:  657:  while(drawntreasure<2){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -:  658:    //if the deck is empty we need to shuffle discard and add to deck
   284004:  659:    if (state->deckCount[currentPlayer] <1){
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
     4441:  660:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  661:    }
   284004:  662:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  663:    //top card of hand is most recently drawn card.
   284004:  664:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
   284004:  665:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
    20004:  666:      drawntreasure++;
        -:  667:    else{
   264000:  668:      temphand[z]=cardDrawn;
        -:  669:      //this should just remove the top card (the most recently drawn one).
   264000:  670:      state->handCount[currentPlayer]--; 
        -:  671:      //BUG1: fail to increase counter for the temp hand
        -:  672:      //z++;
        -:  673:    }
        -:  674:  }
        -:  675:  
    20004:  676:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  677:    // discard all cards in play that have been drawn
    #####:  678:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    #####:  679:    z=z-1;
        -:  680:  }
    10002:  681:  return 0;
        -:  682:}
        -:  683:
function Smithy called 10004 returned 100% blocks executed 100%
    10004:  684:int Smithy(struct gameState *state, int handPos){
    10004:  685:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  686:  
        -:  687:  //+3 Cards
        -:  688:  int i;
        -:  689:  //BUG2: Draw more than 3
    50020:  690:  for (i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
    40016:  691:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  692:  }
        -:  693:  //discard card from hand
    10004:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    10004:  695:  return 0;
        -:  696:}
        -:  697:
function Council_room called 0 returned 0% blocks executed 0%
    #####:  698:int Council_room(struct gameState *state, int handPos){
    #####:  699:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  700:
        -:  701:  //+4 Cards
        -:  702:  int i;
    #####:  703:  for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  704:    drawCard(currentPlayer, state);
call    0 never executed
        -:  705:  }
        -:  706:  
        -:  707:  //+1 Buy
    #####:  708:  state->numBuys++;
        -:  709:      
        -:  710:  //Each other player draws a card
    #####:  711:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  712:    if ( i != currentPlayer ) drawCard(i, state);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  713:  }
        -:  714:      
        -:  715:  //BUG3: fail to discard cards
        -:  716:  //put played card in played card pile
        -:  717:  //discardCard(handPos, currentPlayer, state, 0);
        -:  718:      
    #####:  719:  return 0;
        -:  720:}
        -:  721:
function Village called 10500 returned 100% blocks executed 100%
    10500:  722:int Village(struct gameState* state, int handPos){
    10500:  723:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  724:
        -:  725:  //+1 Card
    10500:  726:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  727:      
        -:  728:  //+2 Actions
    10500:  729:  state->numActions = state->numActions + 2;
        -:  730:      
        -:  731:  //discard played card from hand
    10500:  732:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    10500:  733:  return 0;
        -:  734:}
        -:  735:
function Great_hall called 0 returned 0% blocks executed 0%
    #####:  736:int Great_hall(struct gameState* state, int handPos){
    #####:  737:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  738:  //+1 Card
    #####:  739:  drawCard(currentPlayer, state);
call    0 never executed
        -:  740:  
        -:  741:  //BUG4: fail to +1 Action    
        -:  742:  //+1 Actions
        -:  743:  //state->numActions++;
        -:  744:      
        -:  745:  //discard card from hand
    #####:  746:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  747:  return 0;
        -:  748:}
        -:  749:
        -:  750:/****************************************************
        -:  751:* End of Refactor assignment2
        -:  752:****************************************************/
        -:  753:
function cardEffect called 31006 returned 100% blocks executed 9%
    31006:  754:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  755:{
        -:  756:  int i;
        -:  757:  int j;
        -:  758:  int k;
        -:  759:  int x;
        -:  760:  int index;
    31006:  761:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    31006:  762:  int nextPlayer = currentPlayer + 1;
        -:  763:
    31006:  764:  int tributeRevealedCards[2] = {-1, -1};
        -:  765:  int temphand[MAX_HAND];// moved above the if statement
    31006:  766:  int drawntreasure=0;
        -:  767:  int cardDrawn;
    31006:  768:  int z = 0;// this is the counter for the temp hand
    31006:  769:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  770:    nextPlayer = 0;
        -:  771:  }
        -:  772:  
        -:  773:	
        -:  774:  //uses switch to select card and perform actions
    31006:  775:  switch( card ) 
branch  0 taken 32%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 32%
branch  7 taken 34%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 2%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  776:    {
        -:  777:    case adventurer:
        -:  778:    {
    10002:  779:     Adventurer(state);
call    0 returned 100%
    10002:  780:     break;
        -:  781:    }
        -:  782:
        -:  783:      /*
        -:  784:      while(drawntreasure<2){
        -:  785:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  786:	  shuffle(currentPlayer, state);
        -:  787:	}
        -:  788:	drawCard(currentPlayer, state);
        -:  789:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  790:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  791:	  drawntreasure++;
        -:  792:	else{
        -:  793:	  temphand[z]=cardDrawn;
        -:  794:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  795:	  z++;
        -:  796:	}
        -:  797:      }
        -:  798:      while(z-1>=0){
        -:  799:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  800:	z=z-1;
        -:  801:      }
        -:  802:      return 0;*/
        -:  803:			
        -:  804:    case council_room:
    #####:  805:      Council_room(state, handPos);
call    0 never executed
        -:  806:      /*
        -:  807:      //+4 Cards
        -:  808:      for (i = 0; i < 4; i++)
        -:  809:	{
        -:  810:	  drawCard(currentPlayer, state);
        -:  811:	}
        -:  812:			
        -:  813:      //+1 Buy
        -:  814:      state->numBuys++;
        -:  815:			
        -:  816:      //Each other player draws a card
        -:  817:      for (i = 0; i < state->numPlayers; i++)
        -:  818:	{
        -:  819:	  if ( i != currentPlayer )
        -:  820:	    {
        -:  821:	      drawCard(i, state);
        -:  822:	    }
        -:  823:	}
        -:  824:			
        -:  825:      //put played card in played card pile
        -:  826:      discardCard(handPos, currentPlayer, state, 0);
        -:  827:			
        -:  828:      return 0;*/
        -:  829:			
        -:  830:    case feast:
        -:  831:      //gain card with cost up to 5
        -:  832:      //Backup hand
    #####:  833:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  834:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  835:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  836:      }
        -:  837:      //Backup hand
        -:  838:
        -:  839:      //Update Coins for Buy
    #####:  840:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  841:      x = 1;//Condition to loop on
    #####:  842:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  843:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  844:	  if (DEBUG)
        -:  845:	    printf("None of that card left, sorry!\n");
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  849:	  }
        -:  850:	}
    #####:  851:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  852:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  853:
        -:  854:	  if (DEBUG){
        -:  855:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  856:	  }
        -:  857:	}
        -:  858:	else{
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:	  }
        -:  863:
    #####:  864:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  865:	  x = 0;//No more buying cards
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  869:	  }
        -:  870:
        -:  871:	}
        -:  872:      }     
        -:  873:
        -:  874:      //Reset Hand
    #####:  875:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  876:	state->hand[currentPlayer][i] = temphand[i];
    #####:  877:	temphand[i] = -1;
        -:  878:      }
        -:  879:      //Reset Hand
        -:  880:      			
    #####:  881:      return 0;
        -:  882:			
        -:  883:    case gardens:
    #####:  884:      return -1;
        -:  885:			
        -:  886:    case mine:
    #####:  887:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  888:
    #####:  889:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  890:	{
    #####:  891:	  return -1;
        -:  892:	}
        -:  893:		
    #####:  894:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  895:	{
    #####:  896:	  return -1;
        -:  897:	}
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  915:	      break;
        -:  916:	    }
        -:  917:	}
        -:  918:			
    #####:  919:      return 0;
        -:  920:			
        -:  921:    case remodel:
    #####:  922:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  923:
    #####:  924:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:
        -:  934:      //discard trashed card
    #####:  935:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  936:	{
    #####:  937:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  940:	      break;
        -:  941:	    }
        -:  942:	}
        -:  943:
        -:  944:
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case smithy:
        -:  948:      {
    10004:  949:      Smithy(state, handPos);
call    0 returned 100%
    10004:  950:      break;
        -:  951:      }
        -:  952:      /*
        -:  953:      //+3 Cards
        -:  954:      for (i = 0; i < 3; i++)
        -:  955:	{
        -:  956:	  drawCard(currentPlayer, state);
        -:  957:	}
        -:  958:			
        -:  959:      //discard card from hand
        -:  960:      discardCard(handPos, currentPlayer, state, 0);
        -:  961:      return 0;*/
        -:  962:		
        -:  963:    case village:
    10500:  964:      Village(state, handPos);
call    0 returned 100%
        -:  965:      /*
        -:  966:      //+1 Card
        -:  967:      drawCard(currentPlayer, state);
        -:  968:			
        -:  969:      //+2 Actions
        -:  970:      state->numActions = state->numActions + 2;
        -:  971:			
        -:  972:      //discard played card from hand
        -:  973:      discardCard(handPos, currentPlayer, state, 0);
        -:  974:      return 0;*/
        -:  975:		
        -:  976:    case baron:
    10500:  977:      state->numBuys++;//Increase buys by 1!
    10500:  978:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  979:	int p = 0;//Iterator for hand!
    #####:  980:	int card_not_discarded = 1;//Flag for discard set!
    #####:  981:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  982:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  983:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  984:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  985:	    state->discardCount[currentPlayer]++;
    #####:  986:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  987:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  988:	    }
    #####:  989:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  990:	    state->handCount[currentPlayer]--;
    #####:  991:	    card_not_discarded = 0;//Exit the loop
        -:  992:	  }
    #####:  993:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  994:	    if(DEBUG) {
        -:  995:	      printf("No estate cards in your hand, invalid choice\n");
        -:  996:	      printf("Must gain an estate if there are any\n");
        -:  997:	    }
    #####:  998:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1000:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1001:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:		isGameOver(state);
call    0 never executed
        -: 1003:	      }
        -: 1004:	    }
    #####: 1005:	    card_not_discarded = 0;//Exit the loop
        -: 1006:	  }
        -: 1007:			    
        -: 1008:	  else{
    #####: 1009:	    p++;//Next card
        -: 1010:	  }
        -: 1011:	}
        -: 1012:      }
        -: 1013:			    
        -: 1014:      else{
    10500: 1015:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    10500: 1016:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
    10500: 1017:	  state->supplyCount[estate]--;//Decrement Estates
    10500: 1018:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1019:	    isGameOver(state);
call    0 never executed
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      
    10500: 1025:      return 0;
        -: 1026:		
        -: 1027:    case great_hall:
    #####: 1028:      Great_hall(state, handPos);
call    0 never executed
        -: 1029:      /*
        -: 1030:      //+1 Card
        -: 1031:      drawCard(currentPlayer, state);
        -: 1032:			
        -: 1033:      //+1 Actions
        -: 1034:      state->numActions++;
        -: 1035:			
        -: 1036:      //discard card from hand
        -: 1037:      discardCard(handPos, currentPlayer, state, 0);
        -: 1038:      return 0;*/
        -: 1039:		
        -: 1040:    case minion:
        -: 1041:      //+1 action
    #####: 1042:      state->numActions++;
        -: 1043:			
        -: 1044:      //discard card from hand
    #####: 1045:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1046:			
    #####: 1047:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  state->coins = state->coins + 2;
        -: 1050:	}
        -: 1051:			
    #####: 1052:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1053:	{
        -: 1054:	  //discard hand
    #####: 1055:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1056:	    {
    #####: 1057:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1058:	    }
        -: 1059:				
        -: 1060:	  //draw 4
    #####: 1061:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	    {
    #####: 1063:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //other players discard hand and redraw if hand size > 4
    #####: 1067:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1070:		{
    #####: 1071:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
        -: 1073:		      //discard hand
    #####: 1074:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1075:			{
    #####: 1076:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1077:			}
        -: 1078:							
        -: 1079:		      //draw 4
    #####: 1080:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  drawCard(i, state);
call    0 never executed
        -: 1083:			}
        -: 1084:		    }
        -: 1085:		}
        -: 1086:	    }
        -: 1087:				
        -: 1088:	}
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case steward:
    #####: 1092:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
        -: 1094:	  //+2 cards
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1096:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1097:	}
    #####: 1098:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 coins
    #####: 1101:	  state->coins = state->coins + 2;
        -: 1102:	}
        -: 1103:      else
        -: 1104:	{
        -: 1105:	  //trash 2 cards in hand
    #####: 1106:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1107:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1108:	}
        -: 1109:			
        -: 1110:      //discard card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1112:      return 0;
        -: 1113:		
        -: 1114:    case tribute:
    #####: 1115:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1116:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1117:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1118:	  state->deckCount[nextPlayer]--;
        -: 1119:	}
    #####: 1120:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1121:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1122:	  state->discardCount[nextPlayer]--;
        -: 1123:	}
        -: 1124:	else{
        -: 1125:	  //No Card to Reveal
        -: 1126:	  if (DEBUG){
        -: 1127:	    printf("No cards to reveal\n");
        -: 1128:	  }
        -: 1129:	}
        -: 1130:      }
        -: 1131:	    
        -: 1132:      else{
    #####: 1133:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1136:	    state->deckCount[nextPlayer]++;
    #####: 1137:	    state->discard[nextPlayer][i] = -1;
    #####: 1138:	    state->discardCount[nextPlayer]--;
        -: 1139:	  }
        -: 1140:			    
    #####: 1141:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1142:	} 
    #####: 1143:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1144:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1145:	state->deckCount[nextPlayer]--;
    #####: 1146:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1147:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1148:	state->deckCount[nextPlayer]--;
        -: 1149:      }    
        -: 1150:		       
    #####: 1151:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1152:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1153:	state->playedCardCount++;
    #####: 1154:	tributeRevealedCards[1] = -1;
        -: 1155:      }
        -: 1156:
    #####: 1157:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1158:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1159:	  state->coins += 2;
        -: 1160:	}
        -: 1161:		    
    #####: 1162:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1163:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1164:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1165:	}
        -: 1166:	else{//Action Card
    #####: 1167:	  state->numActions = state->numActions + 2;
        -: 1168:	}
        -: 1169:      }
        -: 1170:	    
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case ambassador:
    #####: 1174:      j = 0;		//used to check if player has enough cards to discard
        -: 1175:
    #####: 1176:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1177:	{
    #####: 1178:	  return -1;				
        -: 1179:	}
        -: 1180:
    #####: 1181:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:
    #####: 1186:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1189:	    {
    #####: 1190:	      j++;
        -: 1191:	    }
        -: 1192:	}
    #####: 1193:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1194:	{
    #####: 1195:	  return -1;				
        -: 1196:	}
        -: 1197:
        -: 1198:      if (DEBUG) 
        -: 1199:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1200:
        -: 1201:      //increase supply count for choosen card by amount being discarded
    #####: 1202:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1203:			
        -: 1204:      //each other player gains a copy of revealed card
    #####: 1205:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
    #####: 1207:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1208:	    {
    #####: 1209:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1210:	    }
        -: 1211:	}
        -: 1212:
        -: 1213:      //discard played card from hand
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1215:
        -: 1216:      //trash copies of cards returned to supply
    #####: 1217:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:	    {
    #####: 1221:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1222:		{
    #####: 1223:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1224:		  break;
        -: 1225:		}
        -: 1226:	    }
        -: 1227:	}			
        -: 1228:
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case cutpurse:
        -: 1232:
    #####: 1233:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1234:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1237:	    {
    #####: 1238:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1239:		{
    #####: 1240:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1241:		    {
    #####: 1242:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1243:		      break;
        -: 1244:		    }
    #####: 1245:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1246:		    {
    #####: 1247:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1248:			{
        -: 1249:			  if (DEBUG)
        -: 1250:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1251:			}	
    #####: 1252:		      break;
        -: 1253:		    }		
        -: 1254:		}
        -: 1255:					
        -: 1256:	    }
        -: 1257:				
        -: 1258:	}				
        -: 1259:
        -: 1260:      //discard played card from hand
    #####: 1261:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1262:
    #####: 1263:      return 0;
        -: 1264:
        -: 1265:		
        -: 1266:    case embargo: 
        -: 1267:      //+2 Coins
      500: 1268:      state->coins = state->coins + 2;
        -: 1269:			
        -: 1270:      //see if selected pile is in play
      500: 1271:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:	{
    #####: 1273:	  return -1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //add embargo token to selected supply pile
      500: 1277:      state->embargoTokens[choice1]++;
        -: 1278:			
        -: 1279:      //trash card
      500: 1280:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 100%
      500: 1281:      return 0;
        -: 1282:		
        -: 1283:    case outpost:
        -: 1284:      //set outpost flag
    #####: 1285:      state->outpostPlayed++;
        -: 1286:			
        -: 1287:      //discard card
    #####: 1288:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1289:      return 0;
        -: 1290:		
        -: 1291:    case salvager:
        -: 1292:      //+1 buy
    #####: 1293:      state->numBuys++;
        -: 1294:			
    #####: 1295:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1296:	{
        -: 1297:	  //gain coins equal to trashed card
    #####: 1298:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1299:	  //trash card
    #####: 1300:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1301:	}
        -: 1302:			
        -: 1303:      //discard card
    #####: 1304:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case sea_hag:
    #####: 1308:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1309:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1310:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1311:	  state->discardCount[i]++;
    #####: 1312:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1313:	}
        -: 1314:      }
    #####: 1315:      return 0;
        -: 1316:		
        -: 1317:    case treasure_map:
        -: 1318:      //search hand for another treasure_map
    #####: 1319:      index = -1;
    #####: 1320:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1321:	{
    #####: 1322:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1323:	    {
    #####: 1324:	      index = i;
    #####: 1325:	      break;
        -: 1326:	    }
        -: 1327:	}
    #####: 1328:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1329:	{
        -: 1330:	  //trash both treasure cards
    #####: 1331:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1332:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1333:
        -: 1334:	  //gain 4 Gold cards
    #####: 1335:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1336:	    {
    #####: 1337:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1338:	    }
        -: 1339:				
        -: 1340:	  //return success
    #####: 1341:	  return 1;
        -: 1342:	}
        -: 1343:			
        -: 1344:      //no second treasure_map found in hand
    #####: 1345:      return -1;
        -: 1346:    }
        -: 1347:	
    20006: 1348:  return -1;
        -: 1349:}
        -: 1350:
function discardCard called 21004 returned 100% blocks executed 100%
    21004: 1351:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1352:{
        -: 1353:	
        -: 1354:  //if card is not trashed, added to Played pile 
    21004: 1355:  if (trashFlag < 1)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -: 1356:    {
        -: 1357:      //add card to played pile
    20504: 1358:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    20504: 1359:      state->playedCardCount++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //set played card to -1
    21004: 1363:  state->hand[currentPlayer][handPos] = -1;
        -: 1364:	
        -: 1365:  //remove card from player's hand
    21004: 1366:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1367:    {
        -: 1368:      //reduce number of cards in hand
      727: 1369:      state->handCount[currentPlayer]--;
        -: 1370:    }
    20277: 1371:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1372:    {
        -: 1373:      //reduce number of cards in hand
      152: 1374:      state->handCount[currentPlayer]--;
        -: 1375:    }
        -: 1376:  else 	
        -: 1377:    {
        -: 1378:      //replace discarded card with last card in hand
    20125: 1379:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1380:      //set last card to -1
    20125: 1381:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1382:      //reduce number of cards in hand
    20125: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:	
    21004: 1386:  return 0;
        -: 1387:}
        -: 1388:
function gainCard called 10500 returned 100% blocks executed 70%
    10500: 1389:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1390:{
        -: 1391:  //Note: supplyPos is enum of choosen card
        -: 1392:	
        -: 1393:  //check if supply pile is empty (0) or card is not used in game (-1)
    10500: 1394:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1395:    {
    #####: 1396:      return -1;
        -: 1397:    }
        -: 1398:	
        -: 1399:  //added card for [whoseTurn] current player:
        -: 1400:  // toFlag = 0 : add to discard
        -: 1401:  // toFlag = 1 : add to deck
        -: 1402:  // toFlag = 2 : add to hand
        -: 1403:
    10500: 1404:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1405:    {
    #####: 1406:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1407:      state->deckCount[player]++;
        -: 1408:    }
    10500: 1409:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1410:    {
    #####: 1411:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1412:      state->handCount[player]++;
        -: 1413:    }
        -: 1414:  else
        -: 1415:    {
    10500: 1416:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    10500: 1417:      state->discardCount[player]++;
        -: 1418:    }
        -: 1419:	
        -: 1420:  //decrease number in supply pile
    10500: 1421:  state->supplyCount[supplyPos]--;
        -: 1422:	 
    10500: 1423:  return 0;
        -: 1424:}
        -: 1425:
function updateCoins called 34076 returned 100% blocks executed 82%
    34076: 1426:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1427:{
        -: 1428:  int i;
        -: 1429:	
        -: 1430:  //reset coin count
    34076: 1431:  state->coins = 0;
        -: 1432:
        -: 1433:  //add coins for each Treasure card in player's hand
   204456: 1434:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1435:    {
   170380: 1436:      if (state->hand[player][i] == copper)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 1437:	{
   134804: 1438:	  state->coins += 1;
        -: 1439:	}
    35576: 1440:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1441:	{
    #####: 1442:	  state->coins += 2;
        -: 1443:	}
    35576: 1444:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1445:	{
    #####: 1446:	  state->coins += 3;
        -: 1447:	}	
        -: 1448:    }	
        -: 1449:
        -: 1450:  //add bonus
    34076: 1451:  state->coins += bonus;
        -: 1452:
    34076: 1453:  return 0;
        -: 1454:}
        -: 1455:
        -: 1456:
        -: 1457://end of dominion.c
        -: 1458:
